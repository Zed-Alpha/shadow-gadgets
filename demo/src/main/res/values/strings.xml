<resources>

    <string name="app_name">Shadow Gadgets Demo</string>

    <string name="welcome_header">Welcome to the\n<big><b><u>Shadow Gadgets Demo</u></b></big></string>
    <string name="welcome">• There are several pages in a basic pager format navigable with the side arrows, or through the menu that pops up when clicking the page title. Please note that the <small><b><tt>ViewPager2</tt></b></small>s might get out of sync if you jump around using the menu. It\'s apparently a common issue that\'s unrelated to the library code.\n\n• The description at the bottom of each page is scrollable, and can also be long-clicked to open a dialog with the same text.\n\n• The shadows throughout this demo have been darkened quite a bit beyond normal, simply to make it easier to see what\'s happening. This was done by increasing the light source alphas in the relevant theme attributes, so that\'s where to look, if you\'d like to adjust them.\n\n• This demo was put together on 1080x1920 xxhdpi devices. Admittedly, several of the layouts were done \"by eye\", and so might have children that do not line up as intended on other configurations. Sorry if that\'s an inconvenience.</string>
    <string name="hide_welcome">Don\'t show this again.</string>

    <string name="description_intro">The round rectangle in the upper left frame is a plain <small><b><tt>&lt;View&gt;</tt></b></small> with a translucent background and adjustable elevation. It can be long-clicked to drag-and-drop it between the two frames, as a simple demonstration of how the clipped shadow will automatically move to its target\'s new parent. (The drag shadow is a plain gray round rectangle, by the way, since we can\'t draw these shadows there.)\n\nThe \"Clip shadow\" switch is simply calling <small><b><tt>clipOutlineShadow = isChecked</tt></b></small> on the target <small><b><tt>View</tt></b></small>, and the radio buttons determine which item the color controls affect: the <small><b><tt>View</tt></b></small> itself, or its shadow.\n\nOn API levels &lt;28, the shadow color is handled with the color compat feature. As for API level 28 (Pie) itself, if shadow color doesn\'t work on that version, please see the middle entry in the README Notes.</string>
    <string name="description_motion">This page shows that the clipped shadows automatically animate and transform along with their targets, even though they\'re not intrinsic to them.\n\nThe top <small><b><tt>View</tt></b></small> can be swiped side to side in a <small><b><tt>MotionLayout</tt></b></small> that\'s simultaneously modifying the target\'s color, scale, and rotation.\n\nThe bottom half demonstrates some <small><b><tt>FloatingActionButton</tt></b></small>s and a <small><b><tt>Snackbar</tt></b></small> inside a <small><b><tt>CoordinatorLayout</tt></b></small>, showing how the shadows integrate well with standard animations.</string>
    <string name="description_plane">The three <small><b><tt>ShadowPlane</tt></b></small>s are demonstrated here, along with the defects possible with the <small><b><tt>Foreground</tt></b></small> and <small><b><tt>Background</tt></b></small> types.\n\nThe setups above are both similar: a plain gray <small><b><tt>View</tt></b></small> with a low elevation on the left, the blue target in the middle with a medium elevation, and another gray one on the right with the highest elevation.\n\nThe top panel is another <small><b><tt>MotionLayout</tt></b></small> with a swipeable target, and the shadows turned off on the gray <small><b><tt>View</tt></b></small>s, to make it easier to watch the shadow on the moving target. The bottom panel is a static arrangement with the target and siblings intersecting, and all the shadow intact.</string>
    <string name="description_apply">The library also offers a few different ways to apply the fix, other than through direct use in code.\n\n• There are several customized subclasses of the common recycling <small><b><tt>ViewGroup</tt></b></small>s like <small><b><tt>RecyclerView</tt></b></small> and <small><b><tt>ListView</tt></b></small> that automatically enable the fix on each of their children, and thereafter handle the shadows\' attach/detach behavior more efficiently than would normally happen. The <small><b><tt>RecyclerView</tt></b></small> on the left is one of those custom classes.\n\n• Most other common <small><b><tt>ViewGroup</tt></b></small>s also have available subclasses that will recognize and handle custom shadow attributes on children in layout XML, allowing you to keep it out of the code entirely. For example, the three FABs above on the right have their shadows fixed with an XML attribute, inside a <small><b><tt>&lt;ClippedShadowsConstraintLayout&gt;</tt></b></small>.\n\n• Lastly, there are inflation helpers that are designed to \"plug in\" to an <small><b><tt>Activity</tt></b></small>\'s layout inflation pipeline to look for the aforementioned attributes without using the custom subclasses, or to apply the fix to tags that match rules defined in code or XML. This is a somewhat niche tool that I don\'t foresee being of much use to others, so I don\'t really push it anymore, but it\'s still in the library, though all of its docs are only in the wiki.</string>
    <string name="description_irregular">Here we\'re demonstrating the <small><b><tt>ViewPathProvider</tt></b></small> interface, and how even simple shapes like a square with one round corner cannot be fixed automatically on API levels 30 and up.\n\nThe library also includes a concrete implementation that will allow the fix to work automatically with <small><b><tt>ViewGroup</tt></b></small>s that have a <small><b><tt>MaterialShapeDrawable</tt></b></small> background, as many of the standard library ones do.</string>
    <string name="description_drawable">The <small><b><tt>ShadowDrawable</tt></b></small> class is included as a convenient way to draw these shadows manually without to having to mess with the core module, but there are a few ways in which it does not act like a regular <small><b><tt>Drawable</tt></b></small> at all. The full details are in the README; this page demonstrates only the main caveat to note when using this.\n\nThough we\'re able to clip these shadows, they\'re still kind of happening in a completely separate draw that\'s behind all the stuff we\'re drawing ourselves with the SDK primitives. Because of that, it\'s possible to get a shadow out of sync with its clipped area, causing the artifacts to become visible out of bounds of the clip.\n\nIf you\'re doing anything more than relatively basic, static draws, extra care should be taken to ensure that the clip is invalidated when any relevant shadow properties are changed.\n\nFor those situations where a layer is required – such as with all color compat shadows, or with certain setups on older API levels – it behaves more like a regular drawable, and just won\'t redraw at all until invalidated.</string>
    <string name="description_compose">This page contains a <small><b><tt>ComposeView</tt></b></small> showing a <small><b><tt>LazyColumn()</tt></b></small> of translucent items, <small><b><tt>FloatingActionButton()</tt></b></small>, a regular <small><b><tt>Button()</tt></b></small>, and a specially shaped <small><b><tt>Card()</tt></b></small> all using <small><b><tt>clippedShadow()</tt></b></small> to replace <small><b><tt>shadow()</tt></b></small>.</string>
    <string name="description_compat_intro">The panel at the top here shows two identical <small><b><tt>View</tt></b></small>s side by side, the left one with native shadow colors, and the right one using color compat. You can switch the white backgrounds off in order to view the whole shadows to see how the colors are applied.\n\nThe color compat mechanism has to tint the shadow as a whole, so we we\'re not able to apply the ambient and spot colors separately. The library includes optional helpers to blend the ambient and spot colors you would use on newer versions, into a single value to use with color compat.\n\nAs noted in the README, messing with the ambient and spot colors\' alphas does not work well with the current blend calculation. I would imagine that most everyone uses full-alpha colors for these anyway, since a \"non-opaque\" light source doesn\'t really make sense, yeah?\n\nYou can switch between identical setups in both frameworks, View and Compose, to compare. When switching, the panels fade in and out in place, to show that the results are identical in both. It might be hard to spot.</string>
    <string name="description_compat_drawable">Color compat has also been added to the <small><b><tt>ShadowDrawable</tt></b></small> class.\n\nIt\'s also now possible to create an unclipped version so the clipping operation can be skipped if it\'s not needed for a particular setup; e.g., if you\'re going to draw an opaque region over it anyway.</string>
    <string name="description_compat_stress_test">These lists are set up to be far more intensive that what your average app would entail, as far as the expensive operations that these shadows can involve.\n\nThe left list is a <small><b><tt>ShadowsRecyclerView</tt></b></small> with an <small><b><tt>Adapter</tt></b></small> that sets a different translucent background on each item along with a clipped shadow using color compat, and evenly distributes the shadows across all three <small><b><tt>ShadowPlane</tt></b></small>s. The group itself takes over the <small><b><tt>Inline</tt></b></small> shadow draws, so it\'s also modifying the normal child draw routine, and there\'s a separate compositing layer for each item you can see, plus a few more off-screen.\n\nThe setup on the right is the Compose analog of the View version, and it consists of <small><b><tt>LazyColumn()</tt></b></small> that sets a <small><b><tt>clippedShadow()</tt></b></small> with an interpolated color compat, also with a separate compositing layer for each item.</string>

    <string name="color_which"><b>Apply color to:</b></string>

    <string name="caveat_irregular">Only relevant on API levels >=30\nCurrent API level: %1d</string>

</resources>